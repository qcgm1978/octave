GNU = "GNU's Not UNIX";len=length(GNU);spaces = (GNU == " ");isequal(length(spaces),len,14);assert(spaces,logical([0,0,0,0,0,1,0,0,0,1,0,0,0,0]))assert(strcmp("abc","abc"),"Return 1 if the character strings s1 and s2 are the same, and 0 otherwise.")assert(strncmp ("abce", "abcd", 3),"Return 1 if the first n characters of strings s1 and s2 are the same, and 0 otherwise.")assert(strncmp ("abce", {"abcd", "bca", "abc"}, 3),[true,false,true])#may also be a cell array of stringsassert(strcmpi("abc","ABC"),"disregarding case of alpha- betic characters")assert(strncmpi("abc","abC",3))quote = "First things first, but not necessarily in that order";quote( quote == " " ) = "_";assert(quote,"First_things_first,_but_not_necessarily_in_that_order")assert(deblank ("   abc   "),"   abc")assert(deblank ([" abc "; " def "]),[" abc";" def"])assert(strtrim (" abc "),"abc");assert(strtrim ([" abc "; " def "]),["abc";"def"])assert(index ("Teststring", "t"),4)assert(rindex ("Teststring", "t"),6)assert(strfind ("abababa", "aba"),[1,3,5])assert(strfind ("abababa", "aba", "overlaps", false),[1,5])#only for unique occurrences of the complete pattern##assert(    strfind ({"abababa", "bebebe", "ab"}, "aba"),{[1,1],[1,2],[1,3]})assert(strjoin ({'Octave','Scilab','Lush','Yorick'}, '*'),"Octave*Scilab*Lush*Yorick")