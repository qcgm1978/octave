clcclear allassert(blanks (10),"          ","Return a string of n blanks.")assert(size(blanks(10)),[1,10])assert(class(blanks(10)),"char")fname="foo";assert(fullname = [fname ".txt"],"foo.txt")assert(char(98),"b")assert(unicode2native("b"),uint8(98))assert(char ([98, 97, 110, 97, 110, 97]),"banana")#taking the corresponding UTF-8 character for each element##assert(char ("an apple", "two pears"),["an apple";"two pears"])assert(strcat ("oc", "tave", " is", " good", " for you"),"octave is good for you")assert(strcat ({"abc"; "ghi"}, {"def"; "jkl"}),{  "abcdef",   "ghijkl"})assert(strvcat ([97, 98, 99], "", {"98", "99", 100}, "str1", ["ha", "lf"]),["abc ";"98  ";"99  ";"d   ";"str1";"half"])assert(strcat ("|", " leading space is preserved", "|"),"| leading space is preserved|")#Trailing white space for any character string input is eliminated be- fore the strings are concatenatedassert( strcat ("|", "trailing space is eliminated ", "|"),"|trailing space is eliminated|")assert(strcat ("homogeneous space |", " ", "| is also eliminated"),"homogeneous space || is also eliminated") s = [ "ab"; "cde" ];         assert(strcat (s, s,s),["ababab";"cdecdecde"])          s = { "ab"; "cd " };assert(         strcat (s, s, s),{"ababab";"cd cd cd "},'cell string values do not have whitespace trimmed.')assert(cstrcat ("ab ", "cd"),"ab cd",'with trailing white space preserved.')s = [ "ab"; "cde" ];#Return a string containing all the arguments concatenated horizontally with trailing white space preservedassert(         cstrcat (s, s, s),["ab ab ab";"cdecdecde"])#char: Create a string array from one or more numeric matrices, character matrices, or cell arrays.cellChar=char ([97, 98, 99], "", {"98", "99", 100}, "str1", ["ha", "lf"]);isequal(typeinfo(cellChar),'sq_string')isequal(cellChar,['abc ''    ''98  ''99  ''d   ''str1''half'])charNum=char([1,2,97,98]);isequal(length(charNum),4)str='  ab';str(1)length(str)#assert(charNum(1),' ')#assert(charNum,str)#Ordinarily, the elements of A are integers in the range 32:127, which are the printable ASCII characters, or in the range 0:255, which are all 8-bit values. ascii = char(reshape(32:127,12,8)')