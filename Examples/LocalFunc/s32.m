% Copyright 2020 Youth#clear#clcrehashfunction fh = octaveS  fh.s32=@_s32;  fh.s8=@_s8;  fh.u=@_u;  fh.storeNegInt=@_storeNegInt;endfunction s32 =_s32(num)  if(  isnumeric(num))  s32=int32(num);  else    s32=int32(str2num(num(1:length(num)-3)));  endifendfunction u =_u(num)   ind=index(num,'u');  intFormat=num(ind:end);  convert=@uint8;  if(intFormat=='u32')  convert=@uint32;endifif(  isnumeric(num))u=convert(num);else     u=convert(str2num(num(3:ind-1)));endifendfunction s8 =_s8(num)if(  isnumeric(num))str=num2str(dec2bin(num));else  str=strtrim(num);  str=num(3:length(num)-2);endifone=find(str=='1');subInd=length(one);toFlip=str(subInd+1:end);toFlip(:)='1';mat=[str(1:subInd-1),'0',toFlip];zero=mat=='0';one=mat=='1';mat(zero)='1';mat(one)='0';s8=-str2num(['0b',mat]);endfunction storeNegInt =_storeNegInt(num)if(  isnumeric(num))#Start with the bit pattern of the positive version of the numberbin=dec2bin(-num);str=num2str(bin);mat=ones(1,8-length(str));mat(:)='0';mat=[char(mat),str];#  flip all of the bitszero=mat=='0';one=mat=='1';mat(zero)='1';mat(one)='0';#  add 1storeNegInt=str2num(dec2bin(str2num(['0b',mat])+1));endifend