clcclearisequal(rot90 ([1, 2; 3, 4], -1),rot90([1, 2; 3, 4], 3),rot90([1, 2; 3, 4], 7),[3,1;4,2])ret=printf ("foo %s\n", "bar");isequal(ret,length("foo%sbar"),8)fail('fieldnames ([1, 2; 3, 4])','fieldnames: Invalid input argument')#function foo1(arg)#  #[reg, prop] = parseparams ()##  endfunction#  foo1({1, 2, "linewidth", 10})#reg =#{#  [1,1] = 1#  [1,2] = 2#}#prop =#{#  [1,1] = linewidth#  [1,2] = 10#} function ret=foo(varargin)  #  Subtract x from y, then add any remaining arguments to the result. The input x must be a numeric scalar, vector, or array.  #The optional input y defaults to 19 if it is not supplied.  others={}  if(length(varargin)>=3)  varargin  [first,second,others]=parseparams(varargin)  else    [first,second]=parseparams(varargin)  endif  if(isempty(second))  second=19endiffirst{1}ret=second -first{1};if(isempty(others))for i=1:length(others)  ret+=others(i)endforendif
endfunction
#isequal(foo (5),14)#assert(foo (1, [3, 5], 3, 9),[14,16])