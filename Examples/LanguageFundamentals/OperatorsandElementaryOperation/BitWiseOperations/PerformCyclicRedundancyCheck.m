clearclcisequal(bitxor(0b101,0b001),0b100,4)isequal(xor(0b101,0b001),0)isequal(xor(5,1),0)isequal(xor(5,0),1)   fail("xor('a','b')","logical: wrong type argument 'sq_string'")isequal(xor([],[1]),[])fail('message = 0b1101100111011010u32;','parse error')message = octaveS.u('0b1101100111011010u32')messageLength = 16;divisor = octaveS.u('0b1111u32');divisorDegree = 3;divisor = bitshift(divisor,messageLength-divisorDegree-1);dec2bin(divisor)divisor = bitshift(divisor,divisorDegree);remainder = bitshift(message,divisorDegree);dec2bin(divisor)dec2bin(remainder)for k = 1:messageLength    if bitget(remainder,messageLength+divisorDegree)        remainder = bitxor(remainder,divisor);    end    remainder = bitshift(remainder,1);endCRC_check_value = bitshift(remainder,-messageLength);dec2bin(CRC_check_value)remainder = bitshift(message,divisorDegree);remainder = bitor(remainder,CRC_check_value);remainder = bitset(remainder,6);dec2bin(remainder)for k = 1:messageLength    if bitget(remainder,messageLength+divisorDegree)        remainder = bitxor(remainder,divisor);    end    remainder = bitshift(remainder,1);endif remainder == 0    disp('Message is error free.')else    disp('Message contains errors.')end